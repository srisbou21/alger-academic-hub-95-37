import { mockDataService, MockEmployee } from './mockDataService';
import { echelonHistoryService } from './echelonHistoryService';
import { timetableService } from './timetableService';
import { additionalEmployees } from './mockData/employeeDataService';
import { createExtendedEchelonHistory } from './mockData/echelonHistoryDataService';
import { calculateSystemStats, SystemStats } from './mockData/statisticsService';

// Extension du service de donn√©es d'exemple avec plus d'employ√©s pour le suivi automatique
class EnhancedMockDataService {
  
  // G√©n√©rer des employ√©s suppl√©mentaires avec diff√©rents statuts d'√©chelons
  getExtendedEmployees(): MockEmployee[] {
    const baseEmployees = mockDataService.getEmployees();
    return [...baseEmployees, ...additionalEmployees];
  }

  // Initialiser toutes les donn√©es enrichies
  initializeEnhancedData(): void {
    // Initialiser les employ√©s √©tendus
    const enhancedEmployees = this.getExtendedEmployees();
    localStorage.setItem('fsecsg_employees', JSON.stringify(enhancedEmployees));

    // Initialiser les services de donn√©es
    mockDataService.initializeAllMockData();
    echelonHistoryService.initializeExampleHistory();
    timetableService.initializeExampleTimetables();

    // Cr√©er des historiques d'√©chelons √©tendus
    this.createExtendedEchelonHistory();

    console.log('üéØ Donn√©es enrichies initialis√©es avec succ√®s!');
    console.log('üìä Employ√©s avec historique d\'√©chelons:', enhancedEmployees.length);
    console.log('üìÖ Emplois du temps disponibles');
  }

  private createExtendedEchelonHistory(): void {
    const extendedHistory = createExtendedEchelonHistory();

    // Ajouter les nouvelles entr√©es √† l'historique existant
    const existingHistory = JSON.parse(localStorage.getItem('echelon_history') || '[]');
    const combinedHistory = [...existingHistory, ...extendedHistory];
    localStorage.setItem('echelon_history', JSON.stringify(combinedHistory));
  }

  // Obtenir les statistiques compl√®tes du syst√®me
  getSystemStats(): SystemStats {
    const employees = this.getExtendedEmployees();
    return calculateSystemStats(employees);
  }
}

export const enhancedMockDataService = new EnhancedMockDataService();